/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.2
  Fuel-Core version: 0.40.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec, Result } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export type GameErrorInput = Enum<{ MaturityNotReached: undefined, NotEnoughFundsDraw: [], WrongAssetDraw: undefined, RequestNotDone: undefined }>;
export type GameErrorOutput = Enum<{ MaturityNotReached: void, NotEnoughFundsDraw: [], WrongAssetDraw: void, RequestNotDone: void }>;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export enum LiquidityPoolErrorInput { VaultAlreadyStarted = 'VaultAlreadyStarted', CannotCloseCurrentRound = 'CannotCloseCurrentRound', WrongDepositedAsset = 'WrongDepositedAsset', VaultNotStarted = 'VaultNotStarted', NoCollateralInVault = 'NoCollateralInVault', MustSignalWithdrawalAfterRoundCompletion = 'MustSignalWithdrawalAfterRoundCompletion', WithdrawalMustBeLarger = 'WithdrawalMustBeLarger', WithdrawalMustBeSmaller = 'WithdrawalMustBeSmaller', MustWithdrawAfterRoundCompletion = 'MustWithdrawAfterRoundCompletion', NoFundsToWithdraw = 'NoFundsToWithdraw', CannotRequestCollateral = 'CannotRequestCollateral', MustRequestCollateralLessThanTotal = 'MustRequestCollateralLessThanTotal', CannotDepositCollateral = 'CannotDepositCollateral', DepositedAmountGt0 = 'DepositedAmountGt0' };
export enum LiquidityPoolErrorOutput { VaultAlreadyStarted = 'VaultAlreadyStarted', CannotCloseCurrentRound = 'CannotCloseCurrentRound', WrongDepositedAsset = 'WrongDepositedAsset', VaultNotStarted = 'VaultNotStarted', NoCollateralInVault = 'NoCollateralInVault', MustSignalWithdrawalAfterRoundCompletion = 'MustSignalWithdrawalAfterRoundCompletion', WithdrawalMustBeLarger = 'WithdrawalMustBeLarger', WithdrawalMustBeSmaller = 'WithdrawalMustBeSmaller', MustWithdrawAfterRoundCompletion = 'MustWithdrawAfterRoundCompletion', NoFundsToWithdraw = 'NoFundsToWithdraw', CannotRequestCollateral = 'CannotRequestCollateral', MustRequestCollateralLessThanTotal = 'MustRequestCollateralLessThanTotal', CannotDepositCollateral = 'CannotDepositCollateral', DepositedAmountGt0 = 'DepositedAmountGt0' };
export enum OutcomeInput { BLUE = 'BLUE', GREEN = 'GREEN', YELLOW = 'YELLOW', RED = 'RED' };
export enum OutcomeOutput { BLUE = 'BLUE', GREEN = 'GREEN', YELLOW = 'YELLOW', RED = 'RED' };
export enum PauseErrorInput { Paused = 'Paused', NotPaused = 'NotPaused' };
export enum PauseErrorOutput { Paused = 'Paused', NotPaused = 'NotPaused' };
export type StateInput = Enum<{ Uninitialized: undefined, Initialized: IdentityInput, Revoked: undefined }>;
export type StateOutput = Enum<{ Uninitialized: void, Initialized: IdentityOutput, Revoked: void }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };

export type GameConfigurables = Partial<{
  LIQUIDITY_POOL: ContractIdInput;
  BASE_ASSET: AssetIdInput;
  MATURITY: BigNumberish;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(enum std::identity::Identity, enum Outcome, u64)",
      "concreteTypeId": "22365060ee120a80dee59e3cd87d14f2407c05cb88b1a4975a8f015d8a8d7070",
      "metadataTypeId": 1
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum GameError",
      "concreteTypeId": "5826d4a858851fed1f0bdf9fec8c6ef8cde309190274786923e4ebc123bb37fc",
      "metadataTypeId": 2
    },
    {
      "type": "enum Outcome",
      "concreteTypeId": "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c",
      "metadataTypeId": 3
    },
    {
      "type": "enum liquidity_pool_abi::LiquidityPoolError",
      "concreteTypeId": "9c632f24dd550d0d95c9d4c0bb5a5b7cec8d24f9b5353c549e123b552a636e8f",
      "metadataTypeId": 4
    },
    {
      "type": "enum standards::src5::AccessError",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
      "metadataTypeId": 5
    },
    {
      "type": "enum standards::src5::State",
      "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "metadataTypeId": 6
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 7
    },
    {
      "type": "enum std::option::Option<enum Outcome>",
      "concreteTypeId": "042fcf127f8b7962a33a0092a79e1e5868c73a96db9e27b15fb3644b86f6d75a",
      "metadataTypeId": 8,
      "typeArguments": [
        "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c"
      ]
    },
    {
      "type": "enum std::result::Result<(),enum liquidity_pool_abi::LiquidityPoolError>",
      "concreteTypeId": "62c98b6959a49888acb319a34de58cc581918c47e31e3fe1d933f1aefb718188",
      "metadataTypeId": 9,
      "typeArguments": [
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        "9c632f24dd550d0d95c9d4c0bb5a5b7cec8d24f9b5353c549e123b552a636e8f"
      ]
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
      "metadataTypeId": 10
    },
    {
      "type": "enum sway_libs::pausable::errors::PauseError",
      "concreteTypeId": "8b3afcadf894415a10b09fc3717487e33802c8ffbb030edafe84ca4a71b280bc",
      "metadataTypeId": 11
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 16
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 17
    },
    {
      "type": "struct std::vec::Vec<(enum std::identity::Identity, enum Outcome, u64)>",
      "concreteTypeId": "1fef95959f24aaa8108666ecb32691fed31e7300c6b9f2ef1c4427da48b9761f",
      "metadataTypeId": 19,
      "typeArguments": [
        "22365060ee120a80dee59e3cd87d14f2407c05cb88b1a4975a8f015d8a8d7070"
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
      "metadataTypeId": 20
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 21
        },
        {
          "name": "__tuple_element",
          "typeId": 21
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 7
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        },
        {
          "name": "__tuple_element",
          "typeId": 21
        }
      ]
    },
    {
      "type": "enum GameError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "MaturityNotReached",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NotEnoughFundsDraw",
          "typeId": 0
        },
        {
          "name": "WrongAssetDraw",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "RequestNotDone",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum Outcome",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "BLUE",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "GREEN",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "YELLOW",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "RED",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum liquidity_pool_abi::LiquidityPoolError",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "VaultAlreadyStarted",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "CannotCloseCurrentRound",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "WrongDepositedAsset",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "VaultNotStarted",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NoCollateralInVault",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MustSignalWithdrawalAfterRoundCompletion",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "WithdrawalMustBeLarger",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "WithdrawalMustBeSmaller",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MustWithdrawAfterRoundCompletion",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NoFundsToWithdraw",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "CannotRequestCollateral",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "MustRequestCollateralLessThanTotal",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "CannotDepositCollateral",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "DepositedAmountGt0",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::AccessError",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "NotOwner",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::State",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "Uninitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Initialized",
          "typeId": 7
        },
        {
          "name": "Revoked",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "Address",
          "typeId": 15
        },
        {
          "name": "ContractId",
          "typeId": 17
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 13
        }
      ],
      "typeParameters": [
        13
      ]
    },
    {
      "type": "enum std::result::Result",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "Ok",
          "typeId": 13
        },
        {
          "name": "Err",
          "typeId": 12
        }
      ],
      "typeParameters": [
        13,
        12
      ]
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "CannotReinitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum sway_libs::pausable::errors::PauseError",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "Paused",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NotPaused",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "generic E",
      "metadataTypeId": 12
    },
    {
      "type": "generic T",
      "metadataTypeId": 13
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 14
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "ptr",
          "typeId": 14
        },
        {
          "name": "cap",
          "typeId": 21
        }
      ],
      "typeParameters": [
        13
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "buf",
          "typeId": 18,
          "typeArguments": [
            {
              "name": "",
              "typeId": 13
            }
          ]
        },
        {
          "name": "len",
          "typeId": 21
        }
      ],
      "typeParameters": [
        13
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "metadataTypeId": 20,
      "components": [
        {
          "name": "new_owner",
          "typeId": 7
        }
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 21
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "owner",
      "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "is_paused",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "pause",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "unpause",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "deposit_authorized",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "fulfill_random",
      "output": "62c98b6959a49888acb319a34de58cc581918c47e31e3fe1d933f1aefb718188",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write",
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_all_bets",
      "output": "1fef95959f24aaa8108666ecb32691fed31e7300c6b9f2ef1c4427da48b9761f",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "new_owner",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "initialize",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Initializes the contract owner."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `new_owner`: [Option<Identity>] - Value to set the owner to"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the owner is already initialized."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: `1`"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "is_mature",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "last_outcome",
      "output": "042fcf127f8b7962a33a0092a79e1e5868c73a96db9e27b15fb3644b86f6d75a",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "nb_block_before_maturity",
      "output": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "outcome",
          "concreteTypeId": "1ab10657bbd8ea67349db4e5e4cb8dcfe03a1aab6a751cdf7341e6f0833f227c"
        }
      ],
      "name": "place_bet",
      "output": "62c98b6959a49888acb319a34de58cc581918c47e31e3fe1d933f1aefb718188",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write",
            "read"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "seed",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "request_random",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write",
            "read"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "4571204900286667806",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
    },
    {
      "logId": "6351998143957377005",
      "concreteTypeId": "5826d4a858851fed1f0bdf9fec8c6ef8cde309190274786923e4ebc123bb37fc"
    },
    {
      "logId": "14454674236531057292",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    },
    {
      "logId": "11268902527989779725",
      "concreteTypeId": "9c632f24dd550d0d95c9d4c0bb5a5b7cec8d24f9b5353c549e123b552a636e8f"
    },
    {
      "logId": "2161305517876418151",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
    },
    {
      "logId": "16280289466020123285",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
    },
    {
      "logId": "10032608944051208538",
      "concreteTypeId": "8b3afcadf894415a10b09fc3717487e33802c8ffbb030edafe84ca4a71b280bc"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "LIQUIDITY_POOL",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 55880
    },
    {
      "name": "BASE_ASSET",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "offset": 55848
    },
    {
      "name": "MATURITY",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc",
      "offset": 55912
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "0fa06f633b6485a29542ef3fac43e33629419894778ed1c10493483d6cbf3979",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "250a12d6d436f057372ee842af6143ed4d87c7e6efc462f27cc57ccb9ff459cf",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "9ec5593778f49daeb28fc108ae1b1d6c062a65cd77782ce3ee0b124071df5efa",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class GameInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    owner: FunctionFragment;
    is_paused: FunctionFragment;
    pause: FunctionFragment;
    unpause: FunctionFragment;
    deposit_authorized: FunctionFragment;
    fulfill_random: FunctionFragment;
    get_all_bets: FunctionFragment;
    initialize: FunctionFragment;
    is_mature: FunctionFragment;
    last_outcome: FunctionFragment;
    nb_block_before_maturity: FunctionFragment;
    place_bet: FunctionFragment;
    request_random: FunctionFragment;
  };
}

export class Game extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: GameInterface;
  declare functions: {
    owner: InvokeFunction<[], StateOutput>;
    is_paused: InvokeFunction<[], boolean>;
    pause: InvokeFunction<[], void>;
    unpause: InvokeFunction<[], void>;
    deposit_authorized: InvokeFunction<[], boolean>;
    fulfill_random: InvokeFunction<[], Result<void, LiquidityPoolErrorOutput>>;
    get_all_bets: InvokeFunction<[], Vec<[IdentityOutput, OutcomeOutput, BN]>>;
    initialize: InvokeFunction<[new_owner: IdentityInput], void>;
    is_mature: InvokeFunction<[], boolean>;
    last_outcome: InvokeFunction<[], Option<OutcomeOutput>>;
    nb_block_before_maturity: InvokeFunction<[], number>;
    place_bet: InvokeFunction<[outcome: OutcomeInput], Result<void, LiquidityPoolErrorOutput>>;
    request_random: InvokeFunction<[seed: string], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
